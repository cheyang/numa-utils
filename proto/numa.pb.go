// Code generated by protoc-gen-go.
// source: numa.proto
// DO NOT EDIT!

/*
Package numa is a generated protocol buffer package.

It is generated from these files:
	numa.proto

It has these top-level messages:
	Empty
	InfoResponse
	MetricsResponse
*/
package numa

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type InfoResponse struct {
	Nodes []*InfoResponse_Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoResponse) GetNodes() []*InfoResponse_Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type InfoResponse_Node struct {
	Id     uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CpuSet []uint32 `protobuf:"varint,2,rep,packed,name=cpuSet" json:"cpuSet,omitempty"`
	Total  uint64   `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
	Free   uint64   `protobuf:"varint,4,opt,name=free" json:"free,omitempty"`
}

func (m *InfoResponse_Node) Reset()                    { *m = InfoResponse_Node{} }
func (m *InfoResponse_Node) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse_Node) ProtoMessage()               {}
func (*InfoResponse_Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type MetricsResponse struct {
	Distances []*MetricsResponse_Distance `protobuf:"bytes,1,rep,name=distances" json:"distances,omitempty"`
}

func (m *MetricsResponse) Reset()                    { *m = MetricsResponse{} }
func (m *MetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*MetricsResponse) ProtoMessage()               {}
func (*MetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MetricsResponse) GetDistances() []*MetricsResponse_Distance {
	if m != nil {
		return m.Distances
	}
	return nil
}

type MetricsResponse_Distance struct {
	Start  uint32 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	End    uint32 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
	Length uint32 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
}

func (m *MetricsResponse_Distance) Reset()                    { *m = MetricsResponse_Distance{} }
func (m *MetricsResponse_Distance) String() string            { return proto.CompactTextString(m) }
func (*MetricsResponse_Distance) ProtoMessage()               {}
func (*MetricsResponse_Distance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func init() {
	proto.RegisterType((*Empty)(nil), "numa.Empty")
	proto.RegisterType((*InfoResponse)(nil), "numa.InfoResponse")
	proto.RegisterType((*InfoResponse_Node)(nil), "numa.InfoResponse.Node")
	proto.RegisterType((*MetricsResponse)(nil), "numa.MetricsResponse")
	proto.RegisterType((*MetricsResponse_Distance)(nil), "numa.MetricsResponse.Distance")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Numa service

type NumaClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoResponse, error)
	GetMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type numaClient struct {
	cc *grpc.ClientConn
}

func NewNumaClient(cc *grpc.ClientConn) NumaClient {
	return &numaClient{cc}
}

func (c *numaClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/numa.Numa/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numaClient) GetMetrics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := grpc.Invoke(ctx, "/numa.Numa/GetMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Numa service

type NumaServer interface {
	GetInfo(context.Context, *Empty) (*InfoResponse, error)
	GetMetrics(context.Context, *Empty) (*MetricsResponse, error)
}

func RegisterNumaServer(s *grpc.Server, srv NumaServer) {
	s.RegisterService(&_Numa_serviceDesc, srv)
}

func _Numa_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumaServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/numa.Numa/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumaServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Numa_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumaServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/numa.Numa/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumaServer).GetMetrics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Numa_serviceDesc = grpc.ServiceDesc{
	ServiceName: "numa.Numa",
	HandlerType: (*NumaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Numa_GetInfo_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Numa_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("numa.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xbb, 0x4e, 0xf3, 0x40,
	0x10, 0x85, 0xe5, 0xc4, 0x49, 0xfe, 0x7f, 0x42, 0x00, 0x8d, 0xb8, 0x58, 0x29, 0x10, 0x4a, 0x15,
	0x45, 0x8a, 0x83, 0x42, 0x09, 0x15, 0x02, 0x21, 0x90, 0xa0, 0x58, 0x1a, 0x44, 0xe7, 0xd8, 0x1b,
	0xdb, 0x92, 0xbd, 0x6b, 0x79, 0xc7, 0x45, 0x9e, 0x84, 0x82, 0x97, 0x65, 0x2f, 0x26, 0x5c, 0xbb,
	0x73, 0xc6, 0x67, 0xec, 0xef, 0x8c, 0x01, 0x44, 0x53, 0x46, 0x61, 0x55, 0x4b, 0x92, 0xe8, 0x1b,
	0x3d, 0x19, 0x40, 0xef, 0xa6, 0xac, 0x68, 0x33, 0x79, 0xf5, 0x60, 0xe7, 0x4e, 0xac, 0x25, 0xe3,
	0xaa, 0x92, 0x42, 0x71, 0x9c, 0x43, 0x4f, 0xc8, 0x84, 0xab, 0xc0, 0x3b, 0xed, 0x4e, 0x87, 0xcb,
	0xe3, 0xd0, 0xee, 0x7e, 0x8d, 0x84, 0x8f, 0xfa, 0x39, 0x73, 0xa9, 0xf1, 0x33, 0xf8, 0xc6, 0xe2,
	0x2e, 0x74, 0xf2, 0x44, 0xef, 0x78, 0xd3, 0x11, 0xd3, 0x0a, 0x8f, 0xa0, 0x1f, 0x57, 0xcd, 0x13,
	0xa7, 0xa0, 0xa3, 0xdf, 0x33, 0x62, 0xad, 0xc3, 0x03, 0xe8, 0x91, 0xa4, 0xa8, 0x08, 0xba, 0x3a,
	0xea, 0x33, 0x67, 0x10, 0xc1, 0x5f, 0xd7, 0x9c, 0x07, 0xbe, 0x1d, 0x5a, 0x3d, 0x79, 0xf3, 0x60,
	0xef, 0x81, 0x53, 0x9d, 0xc7, 0x6a, 0x0b, 0x77, 0x09, 0xff, 0x93, 0x5c, 0x51, 0x24, 0xe2, 0x2d,
	0xe0, 0x89, 0x03, 0xfc, 0x91, 0x0c, 0xaf, 0xdb, 0x18, 0xfb, 0x5c, 0x18, 0xdf, 0xc3, 0xbf, 0x8f,
	0xb1, 0xe1, 0xd0, 0xaa, 0xa6, 0x16, 0xd9, 0x19, 0xdc, 0x87, 0x2e, 0x17, 0x89, 0x46, 0x36, 0x33,
	0x23, 0x4d, 0x8f, 0x82, 0x8b, 0x94, 0x32, 0x0b, 0xac, 0x7b, 0x38, 0xb7, 0x4c, 0x74, 0x6f, 0xfd,
	0x5d, 0x9c, 0xc1, 0xe0, 0x96, 0x93, 0x39, 0x0f, 0x0e, 0x1d, 0x89, 0xbd, 0xeb, 0x18, 0x7f, 0xdf,
	0x0d, 0xcf, 0x00, 0x74, 0xb6, 0x25, 0xfd, 0x1e, 0x3f, 0xfc, 0xb3, 0xc5, 0xd5, 0xec, 0x65, 0x9a,
	0xe6, 0x94, 0x35, 0xab, 0x30, 0x96, 0xe5, 0x22, 0xce, 0xf8, 0x26, 0x12, 0xe9, 0xc2, 0x44, 0xe7,
	0x0d, 0xe5, 0x85, 0x5a, 0xd8, 0x7f, 0x7a, 0x61, 0x06, 0xab, 0xbe, 0xd5, 0xe7, 0xef, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x75, 0x39, 0xd3, 0x53, 0xed, 0x01, 0x00, 0x00,
}
